package com.qzh.daka.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.qzh.daka.entity.DailyHealthDetails;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DAILY_HEALTH_DETAILS".
*/
public class DailyHealthDetailsDao extends AbstractDao<DailyHealthDetails, Long> {

    public static final String TABLENAME = "DAILY_HEALTH_DETAILS";

    /**
     * Properties of entity DailyHealthDetails.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IsAtSchool = new Property(1, String.class, "isAtSchool", false, "isAtSchool");
        public final static Property Location = new Property(2, String.class, "location", false, "location");
        public final static Property Observation = new Property(3, String.class, "observation", false, "observation");
        public final static Property Health = new Property(4, String.class, "health", false, "health");
        public final static Property Temperature = new Property(5, Double.class, "temperature", false, "temperature");
        public final static Property Describe = new Property(6, String.class, "describe", false, "describe");
    }


    public DailyHealthDetailsDao(DaoConfig config) {
        super(config);
    }
    
    public DailyHealthDetailsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DAILY_HEALTH_DETAILS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"isAtSchool\" TEXT," + // 1: isAtSchool
                "\"location\" TEXT," + // 2: location
                "\"observation\" TEXT," + // 3: observation
                "\"health\" TEXT," + // 4: health
                "\"temperature\" REAL," + // 5: temperature
                "\"describe\" TEXT);"); // 6: describe
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DAILY_HEALTH_DETAILS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DailyHealthDetails entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String isAtSchool = entity.getIsAtSchool();
        if (isAtSchool != null) {
            stmt.bindString(2, isAtSchool);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(3, location);
        }
 
        String observation = entity.getObservation();
        if (observation != null) {
            stmt.bindString(4, observation);
        }
 
        String health = entity.getHealth();
        if (health != null) {
            stmt.bindString(5, health);
        }
 
        Double temperature = entity.getTemperature();
        if (temperature != null) {
            stmt.bindDouble(6, temperature);
        }
 
        String describe = entity.getDescribe();
        if (describe != null) {
            stmt.bindString(7, describe);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DailyHealthDetails entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String isAtSchool = entity.getIsAtSchool();
        if (isAtSchool != null) {
            stmt.bindString(2, isAtSchool);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(3, location);
        }
 
        String observation = entity.getObservation();
        if (observation != null) {
            stmt.bindString(4, observation);
        }
 
        String health = entity.getHealth();
        if (health != null) {
            stmt.bindString(5, health);
        }
 
        Double temperature = entity.getTemperature();
        if (temperature != null) {
            stmt.bindDouble(6, temperature);
        }
 
        String describe = entity.getDescribe();
        if (describe != null) {
            stmt.bindString(7, describe);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DailyHealthDetails readEntity(Cursor cursor, int offset) {
        DailyHealthDetails entity = new DailyHealthDetails( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // isAtSchool
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // location
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // observation
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // health
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // temperature
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // describe
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DailyHealthDetails entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIsAtSchool(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLocation(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setObservation(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHealth(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTemperature(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setDescribe(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DailyHealthDetails entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DailyHealthDetails entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DailyHealthDetails entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
